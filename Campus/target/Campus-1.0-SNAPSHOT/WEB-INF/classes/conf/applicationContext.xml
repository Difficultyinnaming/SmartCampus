<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--spring配置文件：声明service，dao，工具类等对象-->

    <context:property-placeholder location="classpath:conf/jdbc.properties" />
    <!--声明数据源，连接数据库-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!--SqlSessionFactoryBean创建SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:conf/mybatis.xml" />
    </bean>
    <!--声明mybatis的扫描器，创建dao对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.hss.campus.dao" />
    </bean>
    <!--声明service的注解@Service所在的包名位置-->
    <context:component-scan base-package="com.hss.campus.service" />
    <!--事务配置：注解的配置，aspectj的配置-->
    <!--1.声明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--2.声明业务方法的事务属性（隔离级别，传播行为，超时时间）
        id:自定义名称，表示<tx:advice>和</tx:advice>之间的配置内容
        transaction-manager：事务管理器对象的id
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager" >
        <!--<tx:attributes>：配置事务属性-->
        <tx:attributes>
            <tx:method name="login" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.NullPointerException"/>

            <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT" />
            <tx:method name="modify*" propagation="REQUIRED" isolation="DEFAULT" />
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" />
            <tx:method name="query*" propagation="REQUIRED" isolation="DEFAULT" />
        </tx:attributes>
    </tx:advice>
    <!--3.配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中类，使用事务
            id：切入点表达式的名称，唯一值
            expression:切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--配置增强器：关联advice和pointcut
            advice-ref:通知，上面tx：advice的配置
            pointcut-ref:切入点表达式的id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt" />
    </aop:config>
</beans>